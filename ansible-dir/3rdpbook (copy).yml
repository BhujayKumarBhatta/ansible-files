---
- hosts: dcim2
  vars_files:
     - vars-3.yml
# For some hosts login to root from a terminal is allowed , in that case we could run it as remote_user=root.
# When root is not allowed , login as ordinary user and escalate to privilaged by using become:true . In the remote server switching to sudo should not ask a password by configuring /etc/sudoers appropriately.

#  remote_user: root
  become: true
#  become_user: root
#  become_method: sudo
  
  tasks:
#Some installation from images points to local cdrom form apt package inatallation. To change it to internet source based on uvbuntu version we are changing the source configuration. After this installation will start based on list of packges in  pbbok-pkginstall-3.yml file 
  - name: For ubuntu 16 Xenial copy the apt-get source ansible-dir/files/sources.list.xenial configuration to /etc/apt/sources.list
    copy : 
       src: files/sources.list.xenial 
       dest: /etc/apt/sources.list.testXenial
    when:
         - ansible_distribution =="ubuntu"
         - ansible_distribution_major_version == "16"
         - absible_distribution_release == "xenial"

  - name: Forubuntu 14 trusty - copy the apt-get source ansible-dir/files/sources.list.trusty configuration to /etc/apt/sources.list
    copy : 
       src: files/sources.list.trusty 
       dest: /etc/apt/sources.list.testtrusty
    when:
         - ansible_distribution == "Ubuntu"
         - ansible_distribution_major_version == "14"
         - ansible_distribution_version == "14.04"
         - ansible_distribution_release == "trusty"

  - include: pbook-pkginstall-3.yml

# Include IP address and host names in the hosts file . This are taken from the varibale file var3.yml   
  - name: Add host addresses  to /etc/hosts
    blockinfile:
      dest: /etc/hosts
      block: "{{ host_table_entry }}"
        
# Configuration of unixodbc  for MSSQL database connection , testing from the server can be done using  isql -v MSSQL mssql mssql123 and \
#tsql -S MSSQL -p 1433 -U mssql -P mssql123     
  - name: copy freetds.conf odbc.ini and odbcinst.ini  config file under /etc/ and etc/freetds/ directory\
          
    copy : 
       src: "{{ item.src }}" 
       dest: "{{ item.dest }}"
    with_items:
        - {src: "/home/ubuntu/ansible-dir/files/odbcinst.ini", dest: "/etc/odbcinst.ini" }
        - {src: "/home/ubuntu/ansible-dir/files/odbc.ini",  dest: "/etc/odbc.ini" }
        - {src: "/home/ubuntu/ansible-dir/files/freetds.conf",  dest: "/etc/freetds/freetds.conf" }

#Deploy your code from github. No changes should be made in the server locally . All code to be changed in the development system and uploaded to github . This playbook will  checkout the latest code from git hub and keep the  server code syncronized.  
  
  - name: checkout latest  code from git hub - all the codes for my django and celery applications will be downloaded 
    git: repo={{code_repo}}  dest={{app_dir}} accept_hostkey=True force=no
 
# Assumtion is a fresh searchlog database in mssql server  with no records in django_migration table  . There is no migration folder ro files  in our app1 directory . Hence we will do a fresh initial migration. 
  - name: django model file need to be activated by makemigrations
    django_manage: command="makemigrations --noinput " app_path=/home/ubuntu/python-projects/djp1 settings=djp1.settings
  - name: use migration command to actually create the database tables  
    django_manage: command=migrate  app_path=/home/ubuntu/python-projects/djp1 settings=djp1.settings

  - name: restart rabbitmq-server
    service: name=rabbitmq-server state=started enabled=yes

  - name: enable rabbitmq plugins
    rabbitmq_plugin: names=rabbitmq_management,rabbitmq_tracing,rabbitmq_federation state=enabled
    notify:
    - restart rabbitmq

  - name: add users
    rabbitmq_user: user={{item}} password=changeme tags=administrator,{{item}} vhost=/ configure_priv=.* write_priv=.* read_priv=.* state=present
    with_items:
    - onepk
    - ubuntu

#  - name: remove default guest user
#    rabbitmq_user: user=guest state=absent

  - name: ensure vhost /test is present
    rabbitmq_vhost: name=/myvhost state=present

#  - name: set federation local-username
#    rabbitmq_parameter: component=federation name=local-username value='"user1"' state=present

####################Celery task starting , with every change in code under @app.task ( in our case AnalyzeServer) celery restart is required   
  - name: Stop celery background tasks worker pool w1
    command: celery multi stop w1 -A djp1 -l info
    args: 
      chdir: /home/ubuntu/python-projects/djp1/

  - name: start celery in background mode - worker pool w1
    command: celery multi start w1 -A djp1 -l info
    args: 
      chdir: /home/ubuntu/python-projects/djp1/

#####################Apache Configuration and starting the service , this overwirites any existing configuration ans is suitable for  a dedicated apache for our app ##############################################

  - name: Check Apache2.conf file exists
    stat: path=/etc/apache/apache2.conf
    register: apache2dotconf_stat
  - name: Stop  Apache 2 service before replacing the apache2.conf file 
    service: name=apache2 state=stopped
  - name: keep a backup of the existing apache2.conf file
    command: mv /etc/apache2/apache2.conf  /etc/apache/apache2.conf.ansible-backup
    when: apache2dotconf_stat.stat.exists
  - name: copy apache2.conf for Apache2 wsgi configuration
    copy : 
       src: files/apache2.conf.wsgi-ansible
       dest: /etc/apache2/apache2.conf
  - name: Start Apache 2 service 
    service: name=apache2 state=started

  handlers:
  - name: restart rabbitmq
    service: name=rabbitmq-server state=restarted   
