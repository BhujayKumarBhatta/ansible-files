---
- hosts: dcim
  vars_files:
     - vars.yml
#  remote_user: ubuntu
  become: true
#  become_user: root
#  become_method: sudo
  
  tasks:

  - name: copy the apt-get source configuration to /etc/apt/sources.list
    copy : 
       src: /etc/apt/sources.list 
       dest: /etc/apt/sources.list

#  - include: pbook-pkginstall.yml
  
  - name: Add host addresses  to /etc/hosts
    blockinfile:
      dest: /etc/hosts
      block: "{{ host_table_entry }}"        
   
  - name: copy freetds.conf odbc.ini and odbcinst.ini  config file under /etc/ and etc/freetds/ directory\
          this will be used for MSSQL database connection , testing from the server can be done using  isql -v MSSQL mssql mssql123 and \
          tsql -S MSSQL -p 1433 -U mssql -P mssql123  
    copy : 
       src: "{{ item.src }}" 
       dest: "{{ item.dest }}"
    with_items:
        - {src: "/home/ubuntu/ansible-dir/files/odbcinst.ini", dest: "/etc/odbcinst.ini" }
        - {src: "/home/ubuntu/ansible-dir/files/odbc.ini",  dest: "/etc/odbc.ini" }
        - {src: "/home/ubuntu/ansible-dir/files/freetds.conf",  dest: "/etc/freetds/freetds.conf" }
  
  
  - name: checkout latest  code from git hub - all the codes for my django and celery applications will be downloaded 
    git: repo={{code_repo}}  dest={{app_dir}} accept_hostkey=True force=no
 
#  - name: django model file need to be activated by makemigrations
#    django_manage: command="makemigrations --noinput app1" app_path=/home/ubuntu/python-projects/djp1 settings=djp1.settings
#  - name: use migration command to actually create the database tables  
#    django_manage: command="migrate  --noinput -fake app1" app_path=/home/ubuntu/python-projects/djp1 settings=djp1.settings apps=app1
  - name: django model file need to be activated by makemigrations
    django_manage: command="makemigrations --noinput " app_path=/home/ubuntu/python-projects/djp1 settings=djp1.settings
  - name: use migration command to actually create the database tables  
    django_manage: command=migrate  app_path=/home/ubuntu/python-projects/djp1 settings=djp1.settings

  - name: restart rabbitmq-server
    service: name=rabbitmq-server state=started enabled=yes

  - name: enable rabbitmq plugins
    rabbitmq_plugin: names=rabbitmq_management,rabbitmq_tracing,rabbitmq_federation state=enabled
    notify:
    - restart rabbitmq

  - name: add users
    rabbitmq_user: user={{item}} password=changeme tags=administrator,{{item}} vhost=/ configure_priv=.* write_priv=.* read_priv=.* state=present
    with_items:
    - onepk
    - ubuntu

#  - name: remove default guest user
#    rabbitmq_user: user=guest state=absent

  - name: ensure vhost /test is present
    rabbitmq_vhost: name=/myvhost state=present

#  - name: set federation local-username
#    rabbitmq_parameter: component=federation name=local-username value='"user1"' state=present

   
  - name: Stop celery background tasks worker pool w1
    command: celery multi stop w1 -A djp1 -l info
    args: 
      chdir: /home/ubuntu/python-projects/djp1/

  - name: start celery in background mode - worker pool w1
    command: celery multi start w1 -A djp1 -l info
    args: 
      chdir: /home/ubuntu/python-projects/djp1/

#  - name: start django
#    shell: daemon /home/ubuntu/python-projects/djp1/python manage.py runserver 0.0.0.0:8000 &

#  - name: Start Django runserver  application  using script   
#    shell:  ./start_django_server.sh
#    args:
#      chdir: "/home/ubuntu/python-projects/djp1"


  - name: Apache2 wsgi configuration 
    blockinfile:
      dest: /etc/apache2/apache2.conf
      block: |
        
        WSGIDaemonProcess example.com python-path=/home/ubuntu/python-projects/djp1 processes=2 threads=15 display-name=%{GROUP}
        WSGIProcessGroup example.com
        WSGIScriptAlias / /home/ubuntu/python-projects/djp1/djp1/wsgi.py
        <Directory /home/ubuntu/python-projects/djp1/djp1>
        <Files wsgi.py>
        Options Indexes FollowSymLinks
        AllowOverride  all
        Order allow,deny
        Allow from all
        Require all granted
        </Files>
        </Directory>
        Alias /static/  /usr/local/lib/python2.7/dist-packages/django/contrib/admin/static/
        <Directory /usr/local/lib/python2.7/dist-packages/django/contrib/admin/static/>
        Allow from all
        Require all granted
        </Directory>
  - name: restart Apache 2 service
    service: name=apache2 state=stopped
  - service: name=apache2 state=started
  handlers:
  - name: restart rabbitmq
    service: name=rabbitmq-server state=restarted   
